// Generated by dts-bundle-generator v9.5.1

import { IBaseDef, Module } from '@boardmeister/antetype-core';
import { Herald } from '@boardmeister/herald';

export type IRotate = ITransform<{
	degree: number;
}>;
export type IOpacity = ITransform<{
	alpha: number;
}>;
export type IFilter = ITransform<{
	filter: string;
}>;
export interface ITransform<T = any> {
	type: string;
	data: T;
}
declare type Modules = Record<string, Module>;
declare class Transformer$1 {
	#private;
	constructor(canvas: HTMLCanvasElement | null, modules: Modules, herald: Herald);
	registerEvents(): void;
	rotate(transform: IRotate, layer: IBaseDef): void;
	opacity(transform: IOpacity): void;
	/**
	 * @TODO rethink this, taking into account UI for settings filters: each filter will be entered independently
	 *       with its own value (could be joined during calc event), so single "string" holder seems insufficient and hard
	 *       to use
	 * @param transform
	 */
	filter(transform: IFilter): void;
}

export {
	Transformer$1 as Transformer,
};

export {};
