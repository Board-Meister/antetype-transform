// Generated by dts-bundle-generator v9.5.1

import React$1 from 'react';
import { RouteProps } from 'react-router-dom';

interface EntryConfig {
	source: string | object;
	namespace: string;
	name: string;
	version: string;
	arguments?: unknown[];
}
interface RegisterConfig {
	entry: EntryConfig;
	type: "scope" | "module";
	scope?: boolean;
	tags?: string[];
	requires?: string[];
	lazy?: boolean;
	asset?: {
		src: string;
	};
	resource?: {
		src: string;
	};
}
type Module = Record<string, unknown>;
interface IModuleImportObject {
	default?: Module | React$1.FC | ((...args: unknown[]) => void);
}
interface IModuleImport {
	config: RegisterConfig;
	module: IModuleImportObject | (() => Promise<Module>);
}
declare class _IInjectable {
	constructor(...args: unknown[]);
	inject(injections: Record<string, object>): void;
	scope?(): Record<string, unknown>;
	static inject: Record<string, string>;
}
type IInjectable = typeof _IInjectable;
declare class Marshal {
	static version: string;
	renderCount: number;
	registered: Record<string, RegisterConfig>;
	loaded: Record<string, object>;
	tagMap: Record<string, IModuleImport[]>;
	scope: Record<string, unknown>;
	instanceMap: WeakMap<Module, RegisterConfig>;
	constructor();
	addScope(name: string, value: unknown): void;
	render(): void;
	register(config: RegisterConfig): void;
	getModuleConstraint(config: RegisterConfig): string;
	get<Type>(key: string): Type | null;
	load(): Promise<void>;
	loadScopes(): Promise<Record<string, RegisterConfig>>;
	updateTagModules(): void;
	tagModules(moduleImport: IModuleImport): void;
	instantiateModule(moduleImport: IModuleImport): Module;
	mapInstance(config: RegisterConfig, module: Module): void;
	getMappedInstance(module: Module): RegisterConfig | undefined;
	loadDependencies(module: Module, config: RegisterConfig): Record<string, object> | undefined | false;
	isESClass(fn: unknown): boolean;
	orderModules(moduleRegistry: Record<string, RegisterConfig>): RegisterConfig[];
	generateLoadGroups(toSend: Record<string, RegisterConfig>): Promise<IModuleImport>[];
	isTag(string: string): boolean;
	import(source: string, addScope?: Record<string, unknown>): Promise<IModuleImportObject>;
	importModule(config: RegisterConfig): Promise<IModuleImportObject>;
	retrieveModulePromise(config: RegisterConfig): Promise<IModuleImport>;
	isObjectEmpty(obj: object): boolean;
}
declare class _ISubscriber {
	static subscriptions: Subscriptions;
}
type ISubscriber = typeof _ISubscriber;
type AmbiguousSubscription = string | Subscription | Subscription[] | EventHandler;
type EventHandler = (event: CustomEvent) => Promise<void> | void;
type Subscriptions = Record<string, AmbiguousSubscription>;
interface Subscription {
	method: string | EventHandler;
	priority?: number;
	constraint?: string | Module | null;
	index?: number;
}
interface ISubscriberObject {
	module: ISubscriber;
	config: RegisterConfig;
}
interface IEventRegistration {
	event: string;
	subscription: AmbiguousSubscription;
	constraint?: string | Module | null;
	sort?: boolean;
	symbol?: symbol | null;
}
interface IInjection extends Record<string, object> {
	subscribers: ISubscriberObject[];
	marshal: Marshal;
}
declare class Herald {
	#private;
	static inject: Record<string, string>;
	inject(injections: IInjection): void;
	dispatch(event: CustomEvent): Promise<void>;
	dispatchSync(event: CustomEvent): void;
	batch(events: IEventRegistration[]): () => void;
	register(event: string, subscription: AmbiguousSubscription, constraint?: string | Module | null, sort?: boolean, symbol?: symbol | null): () => void;
	unregister(event: string, symbol: symbol): void;
}
type PathProps = JSX.IntrinsicAttributes & RouteProps;
interface INavItem {
	node?: React$1.ReactNode;
	label?: string;
	link?: string;
	action?: (e: React$1.MouseEvent<HTMLElement>) => void;
	items?: INavItem[];
}
interface Injected extends Record<string, object> {
	marshal: Marshal;
	herald: Herald;
}
declare class Minstrel {
	#private;
	static inject: Record<string, string>;
	inject(injections: Injected): void;
	setRoute(props: PathProps): void;
	getRoutes(): PathProps[];
	getMenu(): INavItem[];
	addMenuItem(item: INavItem): void;
	setMenu(newMenu: INavItem[]): void;
	getModuleConfig(module: Module): RegisterConfig;
	getResourceUrl(module: Module, suffix: string): string;
	lazy(module: Module, suffix: string, props?: Record<string, any>): React$1.ReactNode;
	component<T>(module: Module, suffix: string, scope?: Record<string, any>): React$1.FC<T>;
	asset(module: Module, suffix: string): string;
}
interface IFont {
	url: string;
	name: string;
}
interface DrawEvent {
	element: IBaseDef;
}
interface CalcEvent {
	element: IBaseDef | null;
}
interface ModulesEvent {
	modules: Modules;
	canvas: HTMLCanvasElement | null;
}
interface Module$1 {
}
interface Modules {
	[key: string]: Module$1;
	system: ISystemModule;
}
declare type XValue = number;
declare type YValue = XValue;
interface IStart {
	x: XValue;
	y: YValue;
}
interface ISize {
	w: XValue;
	h: YValue;
}
interface IArea {
	size: ISize;
	start: IStart;
}
interface IHierarchy {
	parent: IParentDef;
	position: number;
}
interface IBaseDef<T = never> {
	[key: symbol | string]: any;
	hierarchy?: IHierarchy;
	start: IStart;
	size: ISize;
	type: string;
	can?: {
		move?: boolean;
		scale?: boolean;
		remove?: boolean;
	};
	area?: IArea;
	data?: T;
}
interface IParentDef extends IBaseDef {
	layout: IBaseDef[];
}
interface ISystemModule extends Module$1 {
	manage: {
		move: (def: IBaseDef, newStart: IStart) => Promise<void>;
		resize: (def: IBaseDef, newSize: ISize) => Promise<void>;
		remove: (def: IBaseDef) => void;
	};
	view: {
		recalc: (parent: IParentDef) => Promise<IBaseDef[]>;
		redraw: (layout: IBaseDef[]) => void;
		redrawDebounce: () => void;
		calc: (element: IBaseDef, parent: IParentDef, position: number) => Promise<IBaseDef>;
		draw: (element: IBaseDef) => Promise<void>;
		reloadStructure: () => Promise<void>;
		reload: () => void;
		size: (element: IBaseDef) => Promise<IBaseDef>;
	};
	font: {
		load: (font: IFont) => Promise<void>;
	};
	policies: {
		markAsLayer: (layer: IBaseDef) => IBaseDef;
		isLayer: (layer: Record<symbol, any>) => boolean;
	};
	setting: {
		[symbol: symbol]: Record<string, any>;
		set: (name: string, value: unknown) => void;
		get: <T = unknown>(name: string) => T | null;
		has: (name: string) => boolean;
	};
}
export interface IInjected extends Record<string, object> {
	minstrel: Minstrel;
	herald: Herald;
}
export interface ITransform<T = any> {
	type: "string";
	data: T;
}
/**
 * Manages transformation techniques like:
 * - opacity
 * - rotation
 * - canvas filter
 * and additionally stops the drawing for certain elements (draw = false)
 */
export declare class AntetypeTransform {
	#private;
	static inject: {
		minstrel: string;
		herald: string;
	};
	inject(injections: IInjected): void;
	register(event: CustomEvent<ModulesEvent>): Promise<void>;
	condition(event: CustomEvent<CalcEvent>): void;
	setTransform(event: CustomEvent<DrawEvent>): void;
	restoreTransform(event: CustomEvent<DrawEvent>): void;
	static subscriptions: Subscriptions;
}
declare const EnAntetypeTransform: IInjectable & ISubscriber;

export {
	EnAntetypeTransform as default,
};

export {};
