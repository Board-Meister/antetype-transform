// Generated by dts-bundle-generator v9.5.1

import { ModulesEvent } from '@boardmeister/antetype-core';
import { Herald, ISubscriber, Subscriptions } from '@boardmeister/herald';
import { IInjectable } from '@boardmeister/marshal';
import { Minstrel } from '@boardmeister/minstrel';

export interface IInjected extends Record<string, object> {
	minstrel: Minstrel;
	herald: Herald;
}
export interface ITransform<T = any> {
	type: string;
	data: T;
}
/**
 * Manages transformation techniques like:
 * - opacity
 * - rotation
 * - canvas filter
 * and additionally stops the drawing for certain elements (draw = false)
 */
export declare class AntetypeTransform {
	#private;
	static inject: {
		minstrel: string;
		herald: string;
	};
	inject(injections: IInjected): void;
	register(event: CustomEvent<ModulesEvent>): Promise<void>;
	static subscriptions: Subscriptions;
}
declare const EnAntetypeTransform: IInjectable<IInjected> & ISubscriber;

export {
	EnAntetypeTransform as default,
};

export {};
